/**
 * Horded code for future reference.
 */

/**
 * Return HTML to report on an array portion of an HTTP response.
 * 
 * @param  array  $array A member of an HTTP response array.
 * @param  string $label Human-readable label used as a heading for the output.
 * @return string HTML to report on an array portion of an HTTP response.
 */
function report_array( $array, $label ) {

	$out = "";

	// Sanitize each member of the array we've been given.
	$array = array_map( 'esc_html', $array );

	// For each array member, read it into the output as a key value pair.		
	foreach( $array as $k => $v ) {
		$out .= "<li><strong>$k</strong> => $v</li>";
	}

	if( empty( $out ) ) { return false; }
	
	$out = "<h3>$label</h3><ul>$out</ul>";
	
	return $out;
}


	/**
	 * Return HTML to report on an HTTP response.
	 * 
	 * @param  string $request The HTTP response.
	 * @return string HTML to report on an HTTP response.
	 */
	function report( $request ) {

		$out = '';

		// Did we create a wp error?  If so, return.
		if( is_wp_error( $request ) ) {
			$error_string = $request -> get_error_message();
			return __( 'Error:' ) . ' ' . esc_html( $error_string );
		}

		// We're assuming that we got an array.  If not, return.
		if( ! is_array( $request ) ) { return __( 'There is a problem with your request: It must return an array.' ); }

		// We'll report on the response, headers, body, filename, and cookies.
		$out .= $this -> report_array(  $request[ 'response' ], __( 'Response:' ) );
		$out .= $this -> report_array(  $request[ 'headers' ],  __( 'Headers:' ) );
		$out .= $this -> report_string( $request[ 'body' ], 	__( 'Body:' ) );
		$out .= $this -> report_string( $request[ 'filename' ], __( 'Filename:' ) );
		$out .= $this -> report_array(  $request[ 'cookies' ],  __( 'Cookies:' ) );
		
		$out = apply_filters( 'sjf_tjra_report', $out );

		return $out;

	}

/**
 * Return HTML to report on a string portion of an HTTP response.
 * 
 * @param  string $string A member of an HTTP response array.
 * @param  string $label Human-readable label used as a heading for the output.
 * @return string HTML to report on a string portion of an HTTP response.
 */
function report_string( $string, $label ) {

	$string = esc_html( $string );
	
	if( empty( $string ) ) { return false; }

	$out = "<h3>$label</h3><div>$string</div>";
	
	return $out;
}




	/**
	 * Build a url to which we'll send our JSON request.
	 * 
	 * @param  string $domain The domain to which we'll submit our JSON request.
	 * @param  string $route  The route at that domain to which we'll submit our JSON request.
	 * @return string A url to which we'll send our JSON request
	 */
	function build_url( $domain, $route ) {
		
		// Sanitize the domain.
		$domain  = trailingslashit( esc_url( $domain ) );
		
		// Append this item, which the WP JSON REST API plugin expects.
		$domain .= 'wp-json/';

		// Append the route.
		$route   = urlencode( $route );
		$out = $domain . $route;

		$out = apply_filters( 'sjf_tjra_build_url', $out );

		return $out;

	}